<?php

require_once 'DoesNotExistException.php';
require_once 'Url.php';

class Shorten {

    /**
     * The name of the cookie holding this
     * user's LDAP name and a sentinal value
     * in a URL to be replace with the cookie's
     * content.
     */
    const LDAP_TOKEN = 'LDAP';

    /**
     * The name of the cookie holding this
     * user's VM host and a sentinal value
     * in a URL to be replace with the cookie's
     * content.
     */
    const VM_TOKEN = 'VM';

    /**
     * The url pattern to match ourselves. We want
     * to refuse to shorten or retrieve these to avoid infinite looping
     */
    const SELF_PATTERN = '/REGEX_THAT_MATCHES_YOUR_SHORTNER_URL/';

    /**
     * A sentinal token in URLs to be replace with
     * the user's LDAP name.
     */

    public static function dbConn() {
        return new PDO('mysql:host='.DB_HOST.';dbname='.DB_NAME, DB_USER, DB_PASSWORD);
    }

    /**
     * Get the long URL given a short URL
     */
    public static function longFromShort($short_url) {
        $stmt = Shorten::dbConn()->prepare('SELECT long_url FROM ' . DB_TABLE . ' WHERE short_url = ?');
        $stmt->execute(array($short_url));
        $results = $stmt->fetch(PDO::FETCH_ASSOC);
        // refuse to acknowledge self-referential urls exist, along with
        // actually missing ones
        if (!$results || false !== strpos($results['long_url'], self::SELF_PATTERN)) {
            throw new DoesNotExistException();
        }

        return self::replaceTokenWithCookieValue(
            $results['long_url'],
            self::LDAP_TOKEN,
            new LDAPNotSetException()
        );
    }

    /**
     * Replace the string 'LDAP'
     */
    private static function replaceTokenWithCookieValue($long_url, $token, $exception) {
        if (false === strpos($long_url, $token)) {
            return $long_url;
        }

        if (!isset($_COOKIE[$token])) {
            throw $exception;
        }

        return str_replace($token, $_COOKIE[$token], $long_url);
    }

    /**
     * Get a short URL given a long URL
     * @param  string  $long_url  destination url
     * @param  string  $short_url optional short_url code; if not provided, a "random" one will be
     *                            generated by hashing the long_url
     * @param  boolean $force     set to true to skip any url validation.
     *                            a 401.
     * @return string             short url
     */
    public static function shortFromLong($long_url, $short_url = null, $force = false) {
        if (false !== strpos($long_url, self::SELF_PATTERN)) {
            throw new Exception("Invalid long url $long_url");
        }

        $stmt = Shorten::dbConn()->prepare('SELECT short_url FROM ' . DB_TABLE . ' WHERE long_url=?');
        $stmt->execute(array($long_url));
        $results = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$short_url && $results) {
            // URL has already been shortened
            return $results['short_url'];
        } else {
            if (!$force && false === strpos($long_url, self::LDAP_TOKEN) && !Url::isValid($long_url)) {
                throw new Exception("Invalid long url $long_url");
            }
            // URL not in database, insert
            $short_url =  $short_url ?: substr(base_convert(md5($long_url), 16, 36), 0, SHORT_LENGTH);

            try {
                Shorten::dbConn()
                    ->prepare('INSERT INTO ' . DB_TABLE . ' (long_url, short_url, created, creator) VALUES (?, ?, ?, ?)')
                    ->execute(array($long_url, $short_url, time(), $_SERVER['REMOTE_ADDR']));
            } catch (Exception $e) {
                error_log('Inserting short URL failed with error: ' . $e->getMessage());
                die("Insert into DB failed");
            }
        }

        return $short_url;
    }

    public static function deleteFromShort($short_url) {
        try {
            Shorten::dbConn()
                ->prepare('DELETE FROM ' . DB_TABLE. ' WHERE short_url=?')
                ->execute(array($short_url));
        } catch (Exception $e) {
            error_log('Delete failed: ' . $e->getMessage());
            die("Delete failed: ". $e->getMessage());
        }
    }

    public static function query($query) {
        $stmt = Shorten::dbConn()->prepare('SELECT short_url, referrals FROM ' . DB_TABLE. ' WHERE short_url LIKE ? ORDER BY referrals DESC LIMIT 25');
        $stmt->execute(array($query . "%"));
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Increment the access count for the given URL
     */
    public static function increment($short_url) {
        Shorten::dbConn()
            ->prepare('UPDATE ' . DB_TABLE . ' SET referrals=referrals+1 WHERE short_url=?')
            ->execute(array($short_url));
    }
}
